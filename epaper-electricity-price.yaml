esphome:
  name: electricity-price-display
  friendly_name: "Electricity price display"

  includes:
    - "ticks.h"
    - "draw.h"

  on_boot:
    - priority: 10000  # as early as possible
      then:
        - lambda: |-
            // initialize hourly_prices with NaNs to indicate no data
            for (float& price : id(hourly_prices))
              price = NAN;

    - priority: -100  # when everything else should already be initialized
      then:
        - logger.log: "Setting up initial data update check"
        - delay: 5min
        - lambda: |-
            // if no data yet received, update display to show alert
            if (!id(prices_start_date).is_valid())
              id(epaper).update();

esp8266:
  board: nodemcuv2

# Enable logging
logger:

ota:
  - platform: esphome
    password: !secret ota_password
safe_mode:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Display Fallback Hotspot"
    password: !secret fallback_hotspot_password

captive_portal:


external_components:
  # As of esphome version 2024.6.2, support for WeAct 2.9" RBW epaper
  # is in an unmerged pull request
  - source: "github://pr#6226"
    components: [waveshare_epaper]

network:
  enable_ipv6: true


globals:
  - id: hourly_prices
    type: "std::array<float, 48>"
    # initialized to NaN in on_boot
    # TODO: maybe use fixed point instead; no native float in ESP8266

  - id: prices_start_date
    type: "ESPTime"
    # Initialize to a time whose is_valid() == false.
    # Invalid time means that initial data has not yet been received.
    initial_value: "ESPTime::from_epoch_utc(0)"

  - id: update_on_time_sync
    type: "bool"
    initial_value: "false"

# Home Assistant API
api:
  services:
    - service: set_prices
      variables:
        prices: float[]  # prices in cents
      then:
        - lambda: |-
            ESP_LOGI(
              "electricity_price_display", "new prices received: %s",
              [&]() {
                std::string str;
                for (float price : prices) {
                  str += ", ";
                  str += std::to_string(price);
                }
                return str;
              }().c_str() + 2);

            auto& dest = id(hourly_prices);

            auto len = prices.size();
            if (len < dest.size())
              ESP_LOGW(
              "electricity_price_display", "Fewer than %d items",
              dest.size());
            else if (len > dest.size())
              ESP_LOGW(
                "electricity_price_display",
                "More than %d items. Ignoring rest.", dest.size());

            auto dest_it = dest.begin();
            auto end = dest.end();
            for (float price : prices) {
              *dest_it = price;
              if (++dest_it == end)
                break;
            }
            for (; dest_it != end; ++dest_it)
              *dest_it = NAN;

            auto now = id(homeassistant_time).now();
            if (now.is_valid()) {
              id(prices_start_date) = now;
              id(epaper).update();
            } else {
              id(update_on_time_sync) = true;
            }


color:
  - id: red
    hex: "FF0000"

font:
  - # note: Font rendering is terribly ugly for some fonts, such as
    # Roboto and Open Sans. Arial seems to work nicely.
    file: "arial.ttf"
    id: main_font
    size: 15
    glyphs: "0123456789,"

image:
  - file: "mdi:robot-dead-outline"
    id: no_data_icon
    resize: 128x128


spi:
  clk_pin: D1
  mosi_pin: D2

display:
  - platform: waveshare_epaper
    id: epaper
    cs_pin: D4  # also LED pin; LED used as update indicator
    dc_pin: D5
    reset_pin: D6
    busy_pin: D7
    model: 2.90in3c
    rotation: 90
    update_interval: never
    lambda: "draw(it);"  # call code in draw.h


time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: "Europe/Helsinki"
    on_time:
      seconds: 0
      minutes: 0
      then:
        - lambda: |-
            // update display, unless we're still waiting for initial data
            if (id(prices_start_date).is_valid())
              id(epaper).update();
    on_time_sync:
      then:
        - lambda: |-
            if (id(update_on_time_sync)) {
              id(update_on_time_sync) = false;
              id(prices_start_date) = id(homeassistant_time).now();
              id(epaper).update();
            }
